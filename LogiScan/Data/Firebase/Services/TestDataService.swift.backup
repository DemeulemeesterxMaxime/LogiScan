//
//  TestDataService.swift
//  LogiScan
//
//  Created by Demeulemeester on 13/10/2025.
//

import Foundation
import FirebaseFirestore

/// Service pour cr√©er des donn√©es de test dans Firebase
@MainActor
final class TestDataService {
    private let db = Firestore.firestore()
    private let firebaseService = FirebaseService()
    
    /// Cr√©er un jeu complet de donn√©es de test
    /// - 2 √©v√©nements
    /// - 2 camions
    /// - 5 articles de stock
    /// - 20 assets individuels
    func createTestData() async throws {
        print("üß™ [TestData] D√©but de la cr√©ation des donn√©es de test...")
        
        // 1. Cr√©er 2 camions
        let trucks = try await createTestTrucks()
        print("‚úÖ [TestData] 2 camions cr√©√©s")
        
        // 2. Cr√©er 2 √©v√©nements
        let events = try await createTestEvents()
        print("‚úÖ [TestData] 2 √©v√©nements cr√©√©s")
        
        // 3. Cr√©er 5 articles de stock avec 4 assets chacun (20 total)
        try await createTestStockAndAssets()
        print("‚úÖ [TestData] 5 articles et 20 assets cr√©√©s")
        
        print("üéâ [TestData] Donn√©es de test cr√©√©es avec succ√®s!")
    }
    
    // MARK: - Trucks
    
    private func createTestTrucks() async throws -> [Truck] {
        let trucks = [
            Truck(
                name: "Camion A - Mercedes Sprinter",
                status: .available,
                currentLocationId: "DEPOT"
            ),
            Truck(
                name: "Camion B - Iveco Daily",
                status: .inTransit,
                currentLocationId: "EN_ROUTE"
            )
        ]
        
        for truck in trucks {
            try await firebaseService.createTruck(truck.toFirestoreTruck())
        }
        
        return trucks
    }
    
    // MARK: - Events
    
    private func createTestEvents() async throws -> [Event] {
        let calendar = Calendar.current
        let today = Date()
        
        let events = [
            Event(
                eventId: UUID().uuidString,
                name: "Mariage Sophie & Marc",
                clientName: "Sophie Dubois",
                clientPhone: "+33612345678",
                clientEmail: "sophie.dubois@email.com",
                clientAddress: "75 Avenue des Champs-√âlys√©es, 75008 Paris",
                eventAddress: "Ch√¢teau de Versailles, 78000 Versailles",
                setupStartTime: calendar.date(byAdding: .day, value: 7, to: today)!,
                startDate: calendar.date(byAdding: .day, value: 7, to: today)!,
                endDate: calendar.date(byAdding: .day, value: 8, to: today)!,
                status: .confirmed,
                notes: "Mariage √©l√©gant avec 150 invit√©s. D√©cor blanc et or."
            ),
            Event(
                eventId: UUID().uuidString,
                name: "Conf√©rence Tech Summit 2025",
                clientName: "Tech Events SAS",
                clientPhone: "+33687654321",
                clientEmail: "contact@techsummit.fr",
                clientAddress: "10 Rue de la Paix, 75002 Paris",
                eventAddress: "Palais des Congr√®s, 75017 Paris",
                setupStartTime: calendar.date(byAdding: .day, value: 14, to: today)!,
                startDate: calendar.date(byAdding: .day, value: 14, to: today)!,
                endDate: calendar.date(byAdding: .day, value: 16, to: today)!,
                status: .pending,
                notes: "Conf√©rence sur 3 jours avec 500 participants."
            )
        ]
        
        for event in events {
            try await firebaseService.createEvent(event.toFirestoreEvent())
            
            // Ajouter des items de devis pour chaque √©v√©nement
            if event.name.contains("Mariage") {
                try await createWeddingQuoteItems(eventId: event.eventId)
            } else {
                try await createConferenceQuoteItems(eventId: event.eventId)
            }
        }
        
        return events
    }
    
    private func createWeddingQuoteItems(eventId: String) async throws {
        let items = [
            QuoteItem(
                quoteItemId: UUID().uuidString,
                eventId: eventId,
                sku: "CHR001",
                name: "Chaise Napoleon III Dor√©e",
                category: "Mobilier",
                quantity: 150,
                unitPrice: 3.50
            ),
            QuoteItem(
                quoteItemId: UUID().uuidString,
                eventId: eventId,
                sku: "TBL001",
                name: "Table Ronde 180cm",
                category: "Mobilier",
                quantity: 15,
                unitPrice: 25.00
            ),
            QuoteItem(
                quoteItemId: UUID().uuidString,
                eventId: eventId,
                sku: "NAP001",
                name: "Nappe Blanche Rectangulaire",
                category: "Linge",
                quantity: 15,
                unitPrice: 8.00
            )
        ]
        
        for item in items {
            try await firebaseService.createQuoteItem(item.toFirestoreQuoteItem())
        }
    }
    
    private func createConferenceQuoteItems(eventId: String) async throws {
        let items = [
            QuoteItem(
                quoteItemId: UUID().uuidString,
                eventId: eventId,
                sku: "CHR002",
                name: "Chaise Conf√©rence Noire",
                category: "Mobilier",
                quantity: 500,
                unitPrice: 2.50
            ),
            QuoteItem(
                quoteItemId: UUID().uuidString,
                eventId: eventId,
                sku: "POD001",
                name: "Pupitre Conf√©rencier",
                category: "√âquipement",
                quantity: 3,
                unitPrice: 45.00
            ),
            QuoteItem(
                quoteItemId: UUID().uuidString,
                eventId: eventId,
                sku: "SCR001",
                name: "√âcran Projection 3x2m",
                category: "√âquipement",
                quantity: 2,
                unitPrice: 120.00
            )
        ]
        
        for item in items {
            try await firebaseService.createQuoteItem(item.toFirestoreQuoteItem())
        }
    }
    
    // MARK: - Stock & Assets
    
    private func createTestStockAndAssets() async throws {
        let stockItems = [
            StockItem(
                sku: "CHR001",
                name: "Chaise Napoleon III Dor√©e",
                category: "Mobilier",
                description: "Chaise √©l√©gante style Napoleon III avec finition dor√©e",
                purchasePrice: 45.00,
                dailyRentalPrice: 3.50,
                availableQuantity: 200,
                reservedQuantity: 150,
                maintenanceQuantity: 10,
                totalQuantity: 360,
                tags: ["Mariage", "Luxe", "Classique"]
            ),
            StockItem(
                sku: "TBL001",
                name: "Table Ronde 180cm",
                category: "Mobilier",
                description: "Table ronde diam√®tre 180cm, capacit√© 10 personnes",
                purchasePrice: 250.00,
                dailyRentalPrice: 25.00,
                availableQuantity: 30,
                reservedQuantity: 15,
                maintenanceQuantity: 2,
                totalQuantity: 47,
                tags: ["Mariage", "R√©ception", "Grande capacit√©"]
            ),
            StockItem(
                sku: "CHR002",
                name: "Chaise Conf√©rence Noire",
                category: "Mobilier",
                description: "Chaise conf√©rence empilable, structure m√©tal noire",
                purchasePrice: 35.00,
                dailyRentalPrice: 2.50,
                availableQuantity: 800,
                reservedQuantity: 500,
                maintenanceQuantity: 20,
                totalQuantity: 1320,
                tags: ["Conf√©rence", "Entreprise", "Empilable"]
            ),
            StockItem(
                sku: "NAP001",
                name: "Nappe Blanche Rectangulaire",
                category: "Linge",
                description: "Nappe blanche 220x150cm, 100% polyester",
                purchasePrice: 15.00,
                dailyRentalPrice: 8.00,
                availableQuantity: 100,
                reservedQuantity: 15,
                maintenanceQuantity: 5,
                totalQuantity: 120,
                tags: ["Linge", "Blanc", "Classique"]
            ),
            StockItem(
                sku: "POD001",
                name: "Pupitre Conf√©rencier",
                category: "√âquipement",
                description: "Pupitre en bois avec microphone int√©gr√©",
                purchasePrice: 450.00,
                dailyRentalPrice: 45.00,
                availableQuantity: 5,
                reservedQuantity: 3,
                maintenanceQuantity: 0,
                totalQuantity: 8,
                tags: ["Conf√©rence", "Audio", "Bois"]
            )
        ]
        
        for stockItem in stockItems {
            // Cr√©er le stock item
            try await firebaseService.createStockItem(stockItem.toFirestoreStockItem())
            
            // Cr√©er 4 assets pour chaque article (20 total)
            for i in 1...4 {
                let asset = Asset(
                    assetId: UUID().uuidString,
                    sku: stockItem.sku,
                    name: stockItem.name,
                    serialNumber: "\(stockItem.sku)-\(String(format: "%03d", i))",
                    status: i <= 2 ? .available : (i == 3 ? .reserved : .inUse),
                    currentLocationId: i <= 2 ? "DEPOT" : "TRUCK_A",
                    condition: .good,
                    lastMaintenanceDate: Date().addingTimeInterval(-30 * 24 * 3600),
                    purchasePrice: stockItem.purchasePrice,
                    dailyRentalPrice: stockItem.dailyRentalPrice
                )
                
                try await firebaseService.createAsset(asset.toFirestoreAsset())
            }
        }
    }
}
