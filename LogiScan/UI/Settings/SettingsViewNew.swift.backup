//
//  SettingsView.swift
//  LogiScan
//
//  Created by Demeulemeester on 13/10/2025.
//

import SwiftUI
import SwiftData
import PhotosUI
import FirebaseAuth

struct SettingsView: View {
    @EnvironmentObject var authService: AuthService
    @Environment(\.modelContext) private var modelContext
    @Query private var stockItems: [StockItem]
    @Query private var events: [Event]
    @Query private var trucks: [Truck]
    
    @State private var permissionService = PermissionService.shared
    @State private var companyService = CompanyService()
    @State private var firebaseService = FirebaseService()
    @State private var invitationService = InvitationService()
    
    @State private var company: Company?
    @State private var members: [User] = []
    @State private var invitationCodes: [InvitationCode] = []
    @State private var isLoading = true
    @State private var showingLogoutConfirm = false
    @State private var showingDeleteDataConfirm = false
    @State private var selectedDeleteType: DeleteType?
    @State private var isEditingCompany = false
    @State private var errorMessage: String?
    @State private var showingNewCodeSheet = false
    
    // Formulaire entreprise
    @State private var editCompanyName = ""
    @State private var editCompanyEmail = ""
    @State private var editCompanyPhone = ""
    @State private var editCompanyAddress = ""
    @State private var editCompanySiret = ""
    @State private var selectedLogoItem: PhotosPickerItem?
    @State private var logoImage: UIImage?
    @State private var isUploadingLogo = false
    @State private var isSavingCompany = false
    
    enum DeleteType: String {
        case trucks, stock, events, all
        
        var title: String {
            switch self {
            case .trucks: return "Supprimer tous les camions"
            case .stock: return "Supprimer tout le stock"
            case .events: return "Supprimer tous les événements"
            case .all: return "Supprimer toutes les données"
            }
        }
    }
    
    var currentUser: User? {
        permissionService.currentUser
    }
    
    var body: some View {
        List {
            // Section Profil
            profileSection
            
            // Section Entreprise
            if currentUser?.companyId != nil {
                if isLoading {
                    loadingSection
                } else if let company = company {
                    companySection(company: company)
                    membersSection
                    
                    // Section Admin
                    if permissionService.isAdmin() {
                        invitationSection
                    }
                }
            }
            
            // Section Gestion des données
            dataManagementSection
            
            // Section Actions
            actionsSection
        }
        .navigationTitle("Paramètres")
        .navigationBarTitleDisplayMode(.large)
        .refreshable {
            await loadData()
        }
        .onAppear {
            Task {
                await loadData()
            }
        }
        .alert("Déconnexion", isPresented: $showingLogoutConfirm) {
            Button("Annuler", role: .cancel) {}
            Button("Se déconnecter", role: .destructive) {
                logout()
            }
        } message: {
            Text("Voulez-vous vraiment vous déconnecter ?")
        }
        .alert(selectedDeleteType?.title ?? "Supprimer", isPresented: $showingDeleteDataConfirm) {
            Button("Annuler", role: .cancel) {}
            Button("Supprimer", role: .destructive) {
                if let type = selectedDeleteType {
                    deleteData(type: type)
                }
            }
        } message: {
            Text("Cette action est irréversible. Toutes les données seront supprimées.")
        }
        .sheet(isPresented: $showingNewCodeSheet) {
            if let companyId = company?.companyId {
                GenerateInvitationView(companyId: companyId) {
                    Task { await loadData() }
                }
            }
        }
    }
    
    // MARK: - Sections
    
    private var profileSection: some View {
        Section {
            HStack(spacing: 16) {
                Circle()
                    .fill(LinearGradient(colors: [.blue, .cyan], startPoint: .topLeading, endPoint: .bottomTrailing))
                    .frame(width: 60, height: 60)
                    .overlay(
                        Text(initials)
                            .font(.title2)
                            .fontWeight(.bold)
                            .foregroundColor(.white)
                    )
                
                VStack(alignment: .leading, spacing: 4) {
                    Text(currentUser?.displayName ?? "Utilisateur")
                        .font(.headline)
                    Text(currentUser?.email ?? "")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }
                Spacer()
            }
            .padding(.vertical, 8)
            
            if let user = currentUser {
                HStack {
                    Label("Rôle", systemImage: "person.badge.key")
                    Spacer()
                    if let role = user.role {
                        RoleBadge(role: role)
                    }
                }
            }
        } header: {
            Text("Mon Profil")
        }
    }
    
    private var loadingSection: some View {
        Section {
            HStack {
                Spacer()
                ProgressView()
                Spacer()
            }
        }
    }
    
    private func companySection(company: Company) -> some View {
        Section {
            if !isEditingCompany {
                // Mode lecture
                if let logoURL = company.logoURL {
                    AsyncImage(url: URL(string: logoURL)) { image in
                        image.resizable().scaledToFit().frame(height: 80)
                    } placeholder: {
                        ProgressView()
                    }
                }
                
                InfoRow(label: "Nom", value: editCompanyName.isEmpty ? company.name : editCompanyName, icon: "building.2")
                InfoRow(label: "Email", value: editCompanyEmail.isEmpty ? company.email : editCompanyEmail, icon: "envelope")
                
                if let phone = company.phone {
                    InfoRow(label: "Téléphone", value: phone, icon: "phone")
                }
                if let address = company.address {
                    InfoRow(label: "Adresse", value: address, icon: "mappin")
                }
                if let siret = company.siret {
                    InfoRow(label: "SIRET", value: siret, icon: "doc.text")
                }
                
                if permissionService.hasPermission(.editCompany) {
                    Button(action: { 
                        startEditing(company: company)
                    }) {
                        Label("Modifier", systemImage: "pencil")
                    }
                }
            } else {
                // Mode édition
                PhotosPicker(selection: $selectedLogoItem, matching: .images) {
                    if let logoImage = logoImage {
                        Image(uiImage: logoImage)
                            .resizable()
                            .scaledToFit()
                            .frame(height: 80)
                    } else {
                        Label("Changer le logo", systemImage: "photo")
                    }
                }
                .onChange(of: selectedLogoItem) { _, newValue in
                    Task {
                        if let data = try? await newValue?.loadTransferable(type: Data.self),
                           let uiImage = UIImage(data: data) {
                            logoImage = uiImage
                        }
                    }
                }
                
                TextField("Nom de l'entreprise", text: $editCompanyName)
                TextField("Email", text: $editCompanyEmail)
                    .keyboardType(.emailAddress)
                    .autocapitalization(.none)
                TextField("Téléphone", text: $editCompanyPhone)
                    .keyboardType(.phonePad)
                TextField("Adresse", text: $editCompanyAddress)
                TextField("SIRET", text: $editCompanySiret)
                
                Button(action: { 
                    Task { await saveCompany() }
                }) {
                    HStack {
                        if isSavingCompany {
                            ProgressView()
                        }
                        Label(isSavingCompany ? "Enregistrement..." : "Enregistrer", systemImage: "checkmark.circle.fill")
                    }
                }
                .disabled(isSavingCompany || editCompanyName.isEmpty || editCompanyEmail.isEmpty)
                
                Button("Annuler", role: .cancel) {
                    isEditingCompany = false
                }
            }
        } header: {
            Text("Mon Entreprise")
        }
    }
    
    private var membersSection: some View {
        Section {
            ForEach(members, id: \.userId) { member in
                NavigationLink {
                    MemberDetailView(member: member, companyOwnerId: company?.ownerId ?? "")
                        .onDisappear {
                            Task { await loadData() }
                        }
                } label: {
                    HStack(spacing: 12) {
                        Circle()
                            .fill(LinearGradient(colors: [.blue.opacity(0.6), .cyan.opacity(0.6)], startPoint: .topLeading, endPoint: .bottomTrailing))
                            .frame(width: 40, height: 40)
                            .overlay(
                                Text(memberInitials(member.displayName))
                                    .font(.subheadline)
                                    .foregroundColor(.white)
                            )
                        
                        VStack(alignment: .leading, spacing: 2) {
                            HStack {
                                Text(member.displayName)
                                    .font(.subheadline)
                                    .fontWeight(.medium)
                                
                                if member.userId == company?.ownerId {
                                    Image(systemName: "crown.fill")
                                        .font(.caption)
                                        .foregroundColor(.yellow)
                                }
                            }
                            Text(member.email)
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                        
                        Spacer()
                        
                        if let role = member.role {
                            RoleBadge(role: role)
                        }
                    }
                }
            }
        } header: {
            HStack {
                Text("Membres")
                Spacer()
                Text("\(members.count)")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
        }
    }
    
    private var invitationSection: some View {
        Section {
            ForEach(invitationCodes, id: \.codeId) { code in
                VStack(alignment: .leading, spacing: 4) {
                    HStack {
                        Text(code.code)
                            .font(.system(.body, design: .monospaced))
                            .fontWeight(.bold)
                        
                        Spacer()
                        
                        if code.isActive {
                            Image(systemName: "checkmark.circle.fill")
                                .foregroundColor(.green)
                        } else {
                            Image(systemName: "xmark.circle.fill")
                                .foregroundColor(.red)
                        }
                    }
                    
                    Text("\(code.usedCount)/\(code.maxUses) utilisations")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
            }
            
            Button(action: { showingNewCodeSheet = true }) {
                Label("Générer un code", systemImage: "plus.circle.fill")
            }
        } header: {
            Text("Codes d'invitation")
        }
    }
    
    private var dataManagementSection: some View {
        Section {
            Button(role: .destructive) {
                selectedDeleteType = .trucks
                showingDeleteDataConfirm = true
            } label: {
                Label("Supprimer tous les camions (\(trucks.count))", systemImage: "trash")
            }
            
            Button(role: .destructive) {
                selectedDeleteType = .stock
                showingDeleteDataConfirm = true
            } label: {
                Label("Supprimer tout le stock (\(stockItems.count))", systemImage: "trash")
            }
            
            Button(role: .destructive) {
                selectedDeleteType = .events
                showingDeleteDataConfirm = true
            } label: {
                Label("Supprimer tous les événements (\(events.count))", systemImage: "trash")
            }
            
            Button(role: .destructive) {
                selectedDeleteType = .all
                showingDeleteDataConfirm = true
            } label: {
                Label("Supprimer toutes les données", systemImage: "trash.fill")
            }
        } header: {
            Text("Gestion des données")
        } footer: {
            Text("Actions irréversibles. Utilisez avec précaution.")
        }
    }
    
    private var actionsSection: some View {
        Section {
            Button(action: { showingLogoutConfirm = true }) {
                Label("Se déconnecter", systemImage: "rectangle.portrait.and.arrow.right")
                    .foregroundColor(.red)
            }
        }
    }
    
    // MARK: - Actions
    
    private func startEditing(company: Company) {
        editCompanyName = company.name
        editCompanyEmail = company.email
        editCompanyPhone = company.phone ?? ""
        editCompanyAddress = company.address ?? ""
        editCompanySiret = company.siret ?? ""
        isEditingCompany = true
    }
    
    private func saveCompany() async {
        guard let company = company else { return }
        isSavingCompany = true
        
        do {
            var updatedCompany = Company(
                companyId: company.companyId,
                name: editCompanyName,
                logoURL: company.logoURL,
                address: editCompanyAddress.isEmpty ? nil : editCompanyAddress,
                phone: editCompanyPhone.isEmpty ? nil : editCompanyPhone,
                email: editCompanyEmail,
                siret: editCompanySiret.isEmpty ? nil : editCompanySiret,
                createdAt: company.createdAt,
                ownerId: company.ownerId
            )
            
            // Upload logo si modifié
            if let logoImage = logoImage {
                let logoURL = try await companyService.uploadLogo(logoImage, companyId: company.companyId)
                updatedCompany = Company(
                    companyId: updatedCompany.companyId,
                    name: updatedCompany.name,
                    logoURL: logoURL,
                    address: updatedCompany.address,
                    phone: updatedCompany.phone,
                    email: updatedCompany.email,
                    siret: updatedCompany.siret,
                    createdAt: updatedCompany.createdAt,
                    ownerId: updatedCompany.ownerId
                )
            }
            
            try await companyService.updateCompany(updatedCompany)
            
            await MainActor.run {
                self.company = updatedCompany
                isEditingCompany = false
                isSavingCompany = false
                self.logoImage = nil
                self.selectedLogoItem = nil
            }
        } catch {
            await MainActor.run {
                errorMessage = error.localizedDescription
                isSavingCompany = false
            }
        }
    }
    
    private func deleteData(type: DeleteType) {
        Task {
            do {
                switch type {
                case .trucks:
                    for truck in trucks {
                        modelContext.delete(truck)
                    }
                case .stock:
                    for item in stockItems {
                        modelContext.delete(item)
                    }
                case .events:
                    for event in events {
                        modelContext.delete(event)
                    }
                case .all:
                    for truck in trucks {
                        modelContext.delete(truck)
                    }
                    for item in stockItems {
                        modelContext.delete(item)
                    }
                    for event in events {
                        modelContext.delete(event)
                    }
                }
                
                try modelContext.save()
            } catch {
                errorMessage = error.localizedDescription
            }
        }
    }
    
    private func loadData() async {
        isLoading = true
        
        do {
            guard let companyId = currentUser?.companyId else {
                isLoading = false
                return
            }
            
            let loadedCompany = try await companyService.fetchCompany(companyId: companyId)
            let loadedMembers = try await firebaseService.fetchCompanyMembers(companyId: companyId)
            
            var loadedCodes: [InvitationCode] = []
            if permissionService.isAdmin() {
                loadedCodes = try await invitationService.fetchInvitationCodes(companyId: companyId)
            }
            
            await MainActor.run {
                self.company = loadedCompany
                self.members = loadedMembers
                self.invitationCodes = loadedCodes
                self.isLoading = false
            }
        } catch {
            await MainActor.run {
                self.errorMessage = error.localizedDescription
                self.isLoading = false
            }
        }
    }
    
    private func logout() {
        Task {
            try? await authService.signOut()
            permissionService.clearCurrentUser()
        }
    }
    
    private var initials: String {
        guard let name = currentUser?.displayName else { return "?" }
        let components = name.split(separator: " ")
        if components.count >= 2 {
            return "\(components[0].prefix(1))\(components[1].prefix(1))".uppercased()
        } else if let first = components.first {
            return String(first.prefix(1)).uppercased()
        }
        return "?"
    }
    
    private func memberInitials(_ name: String) -> String {
        let components = name.split(separator: " ")
        if components.count >= 2 {
            return "\(components[0].prefix(1))\(components[1].prefix(1))".uppercased()
        } else if let first = components.first {
            return String(first.prefix(1)).uppercased()
        }
        return "?"
    }
}

// MARK: - Supporting Views

struct InfoRow: View {
    let label: String
    let value: String
    let icon: String
    
    var body: some View {
        HStack {
            Label(label, systemImage: icon)
            Spacer()
            Text(value)
                .foregroundColor(.secondary)
        }
    }
}

struct GenerateInvitationView: View {
    let companyId: String
    let onDismiss: () -> Void
    
    @Environment(\.dismiss) var dismiss
    @State private var invitationService = InvitationService()
    @State private var validityDays = 30
    @State private var maxUses = 10
    @State private var isGenerating = false
    @State private var errorMessage: String?
    @State private var generatedCode: InvitationCode?
    
    var body: some View {
        NavigationView {
            Form {
                Section {
                    Stepper("Validité: \(validityDays) jours", value: $validityDays, in: 1...365)
                    Stepper("Utilisations max: \(maxUses)", value: $maxUses, in: 1...100)
                } header: {
                    Text("Paramètres")
                }
                
                if let code = generatedCode {
                    Section {
                        HStack {
                            Text(code.code)
                                .font(.system(.title3, design: .monospaced))
                                .fontWeight(.bold)
                            
                            Spacer()
                            
                            Button(action: {
                                UIPasteboard.general.string = code.code
                            }) {
                                Label("Copier", systemImage: "doc.on.doc")
                            }
                        }
                    } header: {
                        Text("Code généré")
                    }
                }
                
                if let error = errorMessage {
                    Section {
                        Text(error)
                            .foregroundColor(.red)
                    }
                }
            }
            .navigationTitle("Nouveau code")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("Fermer") {
                        onDismiss()
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .primaryAction) {
                    Button(isGenerating ? "Génération..." : "Générer") {
                        Task {
                            await generateCode()
                        }
                    }
                    .disabled(isGenerating || generatedCode != nil)
                }
            }
        }
    }
    
    private func generateCode() async {
        isGenerating = true
        errorMessage = nil
        
        do {
            let code = try await invitationService.generateCode(
                companyId: companyId,
                validityDays: validityDays,
                maxUses: maxUses
            )
            
            await MainActor.run {
                self.generatedCode = code
                self.isGenerating = false
            }
        } catch {
            await MainActor.run {
                self.errorMessage = error.localizedDescription
                self.isGenerating = false
            }
        }
    }
}

struct MemberDetailView: View {
    let member: User
    let companyOwnerId: String
    
    @Environment(\.dismiss) var dismiss
    @State private var firebaseService = FirebaseService()
    @State private var selectedRole: User.UserRole
    @State private var isSaving = false
    @State private var showingDeleteConfirm = false
    @State private var errorMessage: String?
    
    init(member: User, companyOwnerId: String) {
        self.member = member
        self.companyOwnerId = companyOwnerId
        _selectedRole = State(initialValue: member.role ?? .limitedEmployee)
    }
    
    var isOwner: Bool {
        member.userId == companyOwnerId
    }
    
    var body: some View {
        Form {
            Section {
                HStack {
                    Text("Nom")
                    Spacer()
                    Text(member.displayName)
                        .foregroundColor(.secondary)
                }
                
                HStack {
                    Text("Email")
                    Spacer()
                    Text(member.email)
                        .foregroundColor(.secondary)
                }
                
                if isOwner {
                    Label("Propriétaire", systemImage: "crown.fill")
                        .foregroundColor(.yellow)
                }
            } header: {
                Text("Informations")
            }
            
            if !isOwner {
                Section {
                    Picker("Rôle", selection: $selectedRole) {
                        ForEach(User.UserRole.allCases, id: \.self) { role in
                            Text(role.displayName).tag(role)
                        }
                    }
                } header: {
                    Text("Permissions")
                }
                
                Section {
                    Button(role: .destructive) {
                        showingDeleteConfirm = true
                    } label: {
                        Label("Retirer de l'entreprise", systemImage: "person.badge.minus")
                    }
                }
            }
            
            if let error = errorMessage {
                Section {
                    Text(error)
                        .foregroundColor(.red)
                }
            }
        }
        .navigationTitle("Détails")
        .navigationBarTitleDisplayMode(.inline)
        .toolbar {
            if !isOwner && selectedRole != member.role {
                ToolbarItem(placement: .primaryAction) {
                    Button(isSaving ? "Enregistrement..." : "Enregistrer") {
                        Task { await saveMember() }
                    }
                    .disabled(isSaving)
                }
            }
        }
        .alert("Retirer le membre", isPresented: $showingDeleteConfirm) {
            Button("Annuler", role: .cancel) {}
            Button("Retirer", role: .destructive) {
                Task { await removeMember() }
            }
        } message: {
            Text("Voulez-vous vraiment retirer \(member.displayName) de votre entreprise ?")
        }
    }
    
    private func saveMember() async {
        isSaving = true
        
        do {
            var updatedMember = member
            updatedMember.role = selectedRole
            try await firebaseService.updateUser(updatedMember)
            
            await MainActor.run {
                dismiss()
            }
        } catch {
            await MainActor.run {
                errorMessage = error.localizedDescription
                isSaving = false
            }
        }
    }
    
    private func removeMember() async {
        do {
            try await firebaseService.removeMemberFromCompany(userId: member.userId)
            await MainActor.run {
                dismiss()
            }
        } catch {
            await MainActor.run {
                errorMessage = error.localizedDescription
            }
        }
    }
}

#Preview {
    NavigationView {
        SettingsView()
            .environmentObject(AuthService())
    }
}
