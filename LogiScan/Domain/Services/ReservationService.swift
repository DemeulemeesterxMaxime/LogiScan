//
//  ReservationService.swift
//  LogiScan
//
//  Created by Copilot on 14/10/2025.
//

import Foundation
import SwiftData

/// Service de gestion des r√©servations d'assets
@MainActor
final class ReservationService: ObservableObject {
    
    /// S√©lectionne et r√©serve automatiquement les meilleurs assets pour un item
    /// - Parameters:
    ///   - quoteItem: L'item du devis pour lequel r√©server
    ///   - stockItem: L'article de stock correspondant
    ///   - event: L'√©v√©nement concern√©
    ///   - allAssets: Tous les assets disponibles
    ///   - existingReservations: R√©servations existantes
    ///   - modelContext: Contexte SwiftData pour persistance
    /// - Returns: Liste des IDs des assets r√©serv√©s
    func reserveAssets(
        for quoteItem: QuoteItem,
        stockItem: StockItem,
        event: Event,
        allAssets: [Asset],
        existingReservations: [AssetReservation],
        modelContext: ModelContext
    ) async throws -> [String] {
        
        print("üîí [ReservationService] R√©servation d'assets pour \(stockItem.name)")
        print("   Quantit√© demand√©e: \(quoteItem.quantity)")
        
        // 1. Filtrer les assets de cet article
        let itemAssets = allAssets.filter { $0.sku == stockItem.sku }
        print("   Assets disponibles (total): \(itemAssets.count)")
        
        // 2. Filtrer les assets disponibles (pas de conflit de date)
        let availableAssets = itemAssets.filter { asset in
            !hasConflictingReservation(
                asset: asset,
                eventDates: (event.startDate, event.endDate),
                reservations: existingReservations,
                excludingEvent: event.eventId
            )
        }
        print("   Assets sans conflit: \(availableAssets.count)")
        
        // 3. V√©rifier qu'on a assez d'assets
        guard availableAssets.count >= quoteItem.quantity else {
            print("‚ùå Stock insuffisant: \(availableAssets.count)/\(quoteItem.quantity)")
            throw ReservationError.insufficientStock(
                available: availableAssets.count,
                requested: quoteItem.quantity
            )
        }
        
        // 4. S√©lectionner les meilleurs assets
        let selectedAssets = selectBestAssets(
            from: availableAssets,
            quantity: quoteItem.quantity
        )
        print("   Assets s√©lectionn√©s: \(selectedAssets.count)")
        
        // 5. Cr√©er les r√©servations
        var assignedIds: [String] = []
        for asset in selectedAssets {
            let reservation = AssetReservation(
                reservationId: UUID().uuidString,
                assetId: asset.assetId,
                eventId: event.eventId,
                startDate: event.startDate,
                endDate: event.endDate,
                status: .pending
            )
            modelContext.insert(reservation)
            assignedIds.append(asset.assetId)
            
            print("   üîí R√©serv√©: \(asset.assetId) (\(asset.status.rawValue))")
        }
        
        // 6. Sauvegarder les r√©servations
        try modelContext.save()
        print("‚úÖ [ReservationService] \(assignedIds.count) assets r√©serv√©s avec succ√®s")
        
        return assignedIds
    }
    
    /// Lib√®re toutes les r√©servations d'un item
    func releaseReservations(
        for quoteItem: QuoteItem,
        event: Event,
        allReservations: [AssetReservation],
        modelContext: ModelContext
    ) async throws {
        
        print("üîì [ReservationService] Lib√©ration des r√©servations pour \(quoteItem.name)")
        
        let itemReservations = allReservations.filter { reservation in
            reservation.eventId == event.eventId &&
            quoteItem.assignedAssets.contains(reservation.assetId)
        }
        
        print("   R√©servations √† lib√©rer: \(itemReservations.count)")
        
        for reservation in itemReservations {
            modelContext.delete(reservation)
            print("   üîì Lib√©r√©: \(reservation.assetId)")
        }
        
        try modelContext.save()
        print("‚úÖ [ReservationService] R√©servations lib√©r√©es")
    }
    
    /// Lib√®re un seul asset (quand on diminue la quantit√©)
    func releaseOneAsset(
        for quoteItem: QuoteItem,
        event: Event,
        allReservations: [AssetReservation],
        modelContext: ModelContext
    ) async throws -> String? {
        
        guard !quoteItem.assignedAssets.isEmpty else {
            print("‚ö†Ô∏è [ReservationService] Aucun asset assign√© √† lib√©rer")
            return nil
        }
        
        // Prendre le dernier asset assign√©
        let assetIdToRelease = quoteItem.assignedAssets.last!
        
        if let reservation = allReservations.first(where: {
            $0.assetId == assetIdToRelease && $0.eventId == event.eventId
        }) {
            modelContext.delete(reservation)
            try modelContext.save()
            print("üîì [ReservationService] Asset lib√©r√©: \(assetIdToRelease)")
            return assetIdToRelease
        }
        
        return nil
    }
    
    /// Ajuste les r√©servations quand la quantit√© change
    func adjustReservations(
        for quoteItem: QuoteItem,
        stockItem: StockItem,
        newQuantity: Int,
        event: Event,
        allAssets: [Asset],
        allReservations: [AssetReservation],
        modelContext: ModelContext
    ) async throws -> [String] {
        
        let currentQuantity = quoteItem.assignedAssets.count
        print("üîÑ [ReservationService] Ajustement r√©servations: \(currentQuantity) ‚Üí \(newQuantity)")
        
        if newQuantity > currentQuantity {
            // Ajouter des r√©servations
            let additionalQuantity = newQuantity - currentQuantity
            print("   ‚ûï Ajout de \(additionalQuantity) r√©servations")
            
            let additionalIds = try await reserveAdditionalAssets(
                quantity: additionalQuantity,
                for: stockItem,
                event: event,
                allAssets: allAssets,
                existingReservations: allReservations,
                excludingAssets: quoteItem.assignedAssets,
                modelContext: modelContext
            )
            
            return quoteItem.assignedAssets + additionalIds
            
        } else if newQuantity < currentQuantity {
            // Lib√©rer des r√©servations
            let toRemoveCount = currentQuantity - newQuantity
            print("   ‚ûñ Suppression de \(toRemoveCount) r√©servations")
            
            let assetsToKeep = Array(quoteItem.assignedAssets.prefix(newQuantity))
            let assetsToRelease = Array(quoteItem.assignedAssets.suffix(toRemoveCount))
            
            for assetId in assetsToRelease {
                if let reservation = allReservations.first(where: {
                    $0.assetId == assetId && $0.eventId == event.eventId
                }) {
                    modelContext.delete(reservation)
                    print("   üîì Lib√©r√©: \(assetId)")
                }
            }
            
            try modelContext.save()
            return assetsToKeep
        }
        
        // Pas de changement
        return quoteItem.assignedAssets
    }
    
    // MARK: - Private Methods
    
    /// S√©lectionne les meilleurs assets disponibles selon des crit√®res de qualit√©
    private func selectBestAssets(
        from assets: [Asset],
        quantity: Int
    ) -> [Asset] {
        
        return assets
            .sorted { (asset1: Asset, asset2: Asset) -> Bool in
                // Crit√®re 1: Statut (disponible en priorit√©)
                if asset1.status != asset2.status {
                    if asset1.status == .available { return true }
                    if asset2.status == .available { return false }
                }
                
                // Crit√®re 2: Pas de maintenance n√©cessaire
                if asset1.needsMaintenance != asset2.needsMaintenance {
                    return !asset1.needsMaintenance && asset2.needsMaintenance
                }
                
                // Crit√®re 3: Valeur (prot√©ger les assets les plus chers)
                if asset1.value != asset2.value {
                    return asset1.value < asset2.value
                }
                
                return false
            }
            .prefix(quantity)
            .map { $0 }
    }
    
    /// V√©rifie si un asset a une r√©servation conflictuelle
    private func hasConflictingReservation(
        asset: Asset,
        eventDates: (start: Date, end: Date),
        reservations: [AssetReservation],
        excludingEvent: String
    ) -> Bool {
        
        return reservations.contains { reservation in
            // M√™me asset
            guard reservation.assetId == asset.assetId else { return false }
            
            // Exclure le m√™me √©v√©nement
            guard reservation.eventId != excludingEvent else { return false }
            
            // Exclure les r√©servations annul√©es
            guard reservation.status != .cancelled else { return false }
            
            // V√©rifier chevauchement de dates
            let hasOverlap = datesOverlap(
                start1: reservation.startDate,
                end1: reservation.endDate,
                start2: eventDates.start,
                end2: eventDates.end
            )
            
            return hasOverlap
        }
    }
    
    /// V√©rifie si deux p√©riodes se chevauchent
    private func datesOverlap(
        start1: Date,
        end1: Date,
        start2: Date,
        end2: Date
    ) -> Bool {
        return start1 < end2 && end1 > start2
    }
    
    /// R√©serve des assets additionnels (pour augmentation de quantit√©)
    private func reserveAdditionalAssets(
        quantity: Int,
        for stockItem: StockItem,
        event: Event,
        allAssets: [Asset],
        existingReservations: [AssetReservation],
        excludingAssets: [String],
        modelContext: ModelContext
    ) async throws -> [String] {
        
        // Filtrer les assets de cet article
        let itemAssets = allAssets.filter { $0.sku == stockItem.sku }
        
        // Exclure les assets d√©j√† assign√©s
        let availableAssets = itemAssets.filter { asset in
            !excludingAssets.contains(asset.assetId) &&
            !hasConflictingReservation(
                asset: asset,
                eventDates: (event.startDate, event.endDate),
                reservations: existingReservations,
                excludingEvent: event.eventId
            )
        }
        
        guard availableAssets.count >= quantity else {
            throw ReservationError.insufficientStock(
                available: availableAssets.count,
                requested: quantity
            )
        }
        
        let selectedAssets = selectBestAssets(from: availableAssets, quantity: quantity)
        
        var assignedIds: [String] = []
        for asset in selectedAssets {
            let reservation = AssetReservation(
                reservationId: UUID().uuidString,
                assetId: asset.assetId,
                eventId: event.eventId,
                startDate: event.startDate,
                endDate: event.endDate,
                status: .pending
            )
            modelContext.insert(reservation)
            assignedIds.append(asset.assetId)
        }
        
        try modelContext.save()
        return assignedIds
    }
}

// MARK: - Reservation Error

enum ReservationError: LocalizedError {
    case insufficientStock(available: Int, requested: Int)
    case reservationFailed
    case assetNotFound
    case conflictDetected
    
    var errorDescription: String? {
        switch self {
        case .insufficientStock(let available, let requested):
            return "Stock insuffisant : \(available) disponible(s) sur \(requested) demand√©(s)"
        case .reservationFailed:
            return "√âchec de la r√©servation"
        case .assetNotFound:
            return "Asset non trouv√©"
        case .conflictDetected:
            return "Conflit de r√©servation d√©tect√©"
        }
    }
}
