//
//  QuoteStatusSyncService.swift
//  LogiScan
//
//  Created by Assistant on 27/10/2025.
//

import Foundation
import SwiftData

@MainActor
class QuoteStatusSyncService: ObservableObject {
    private let versionService = QuoteVersionService()
    
    /// Synchronise le statut d'un √©v√©nement bas√© sur l'existence de versions
    func syncEventQuoteStatus(event: Event, modelContext: ModelContext) async {
        do {
            // V√©rifier si des versions existent dans Firestore
            let hasVersions = try await versionService.hasFinalizedVersion(for: event.eventId)
            
            // Si des versions existent mais que le statut local est "draft"
            // alors synchroniser le statut
            if hasVersions && event.quoteStatus == .draft {
                print("üîÑ [QuoteStatusSync] Synchronisation statut pour: \(event.name)")
                event.quoteStatus = .finalized
                event.updatedAt = Date()
                
                try modelContext.save()
                print("‚úÖ [QuoteStatusSync] Statut synchronis√©: finalized")
            } else if !hasVersions && event.quoteStatus != .draft {
                // Si aucune version n'existe mais que le statut est finalis√©
                // (cas rare, mais possible si les donn√©es Firestore ont √©t√© supprim√©es)
                print("‚ö†Ô∏è [QuoteStatusSync] Incoh√©rence d√©tect√©e: pas de version mais statut = \(event.quoteStatus.rawValue)")
                // On ne change pas automatiquement le statut pour √©viter les pertes de donn√©es
                // L'utilisateur devra refinaliser le devis
            }
        } catch {
            print("‚ùå [QuoteStatusSync] Erreur: \(error.localizedDescription)")
        }
    }
    
    /// Synchronise tous les √©v√©nements au d√©marrage de l'app
    func syncAllEvents(modelContext: ModelContext) async {
        let descriptor = FetchDescriptor<Event>()
        
        do {
            let events = try modelContext.fetch(descriptor)
            print("üîÑ [QuoteStatusSync] Synchronisation de \(events.count) √©v√©nements...")
            
            for event in events {
                await syncEventQuoteStatus(event: event, modelContext: modelContext)
            }
            
            print("‚úÖ [QuoteStatusSync] Synchronisation termin√©e")
        } catch {
            print("‚ùå [QuoteStatusSync] Erreur fetch events: \(error.localizedDescription)")
        }
    }
}
