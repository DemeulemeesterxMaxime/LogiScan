//
//  TruckStatusService.swift
//  LogiScan
//
//  Created by Assistant on 28/10/2025.
//

import Foundation
import SwiftData

/// Service pour g√©rer automatiquement le statut des camions en fonction des √©v√©nements
class TruckStatusService {
    
    /// Met √† jour le statut d'un camion en fonction des √©v√©nements auxquels il est assign√©
    static func updateTruckStatus(
        truck: Truck,
        events: [Event],
        modelContext: ModelContext
    ) throws {
        let now = Date()
        
        // Trouver tous les √©v√©nements actifs utilisant ce camion
        let activeEvents = events.filter { event in
            event.assignedTruckId == truck.truckId &&
            event.status != .cancelled &&
            event.status != .completed &&
            isEventActive(event, at: now)
        }
        
        // D√©terminer le statut appropri√©
        if activeEvents.isEmpty {
            // Aucun √©v√©nement actif : disponible (sauf si en maintenance)
            if truck.status != .maintenance {
                truck.status = .available
            }
        } else {
            // Au moins un √©v√©nement actif : d√©terminer le statut selon les dates
            let earliestEvent = activeEvents.min(by: { $0.setupStartTime < $1.setupStartTime })!
            
            if now < earliestEvent.setupStartTime {
                // Avant le montage : chargement
                truck.status = .loading
            } else if now >= earliestEvent.setupStartTime && now < earliestEvent.startDate {
                // Entre montage et d√©but : en route vers le site
                truck.status = .enRoute
            } else if now >= earliestEvent.startDate && now <= earliestEvent.endDate {
                // Pendant l'√©v√©nement : sur site
                truck.status = .atSite
            } else if now > earliestEvent.endDate {
                // Apr√®s l'√©v√©nement : en retour
                truck.status = .returning
            }
        }
        
        truck.updatedAt = Date()
        try modelContext.save()
        
        print("üöö [TruckStatusService] Camion \(truck.displayName) ‚Üí \(truck.status.displayName)")
    }
    
    /// V√©rifie si un √©v√©nement est consid√©r√© comme actif (non termin√© et dans une p√©riode proche)
    private static func isEventActive(_ event: Event, at date: Date) -> Bool {
        // Un √©v√©nement est actif s'il est dans une fen√™tre de 7 jours avant le montage jusqu'√† 1 jour apr√®s la fin
        let calendar = Calendar.current
        let sevenDaysBefore = calendar.date(byAdding: .day, value: -7, to: event.setupStartTime) ?? event.setupStartTime
        let oneDayAfter = calendar.date(byAdding: .day, value: 1, to: event.endDate) ?? event.endDate
        
        return date >= sevenDaysBefore && date <= oneDayAfter
    }
    
    /// Met √† jour tous les camions en fonction de tous les √©v√©nements
    static func updateAllTruckStatuses(
        modelContext: ModelContext
    ) throws {
        let trucksDescriptor = FetchDescriptor<Truck>()
        let eventsDescriptor = FetchDescriptor<Event>()
        
        let allTrucks = try modelContext.fetch(trucksDescriptor)
        let allEvents = try modelContext.fetch(eventsDescriptor)
        
        print("üîÑ [TruckStatusService] Mise √† jour de \(allTrucks.count) camions...")
        
        for truck in allTrucks {
            try updateTruckStatus(truck: truck, events: allEvents, modelContext: modelContext)
        }
        
        print("‚úÖ [TruckStatusService] Tous les camions mis √† jour")
    }
    
    /// Met √† jour le statut d'un camion sp√©cifique par son ID
    static func updateTruckStatusById(
        truckId: String,
        modelContext: ModelContext
    ) throws {
        let trucksDescriptor = FetchDescriptor<Truck>()
        let eventsDescriptor = FetchDescriptor<Event>()
        
        let allTrucks = try modelContext.fetch(trucksDescriptor)
        let allEvents = try modelContext.fetch(eventsDescriptor)
        
        guard let truck = allTrucks.first(where: { $0.truckId == truckId }) else {
            print("‚ö†Ô∏è [TruckStatusService] Camion \(truckId) introuvable")
            return
        }
        
        try updateTruckStatus(truck: truck, events: allEvents, modelContext: modelContext)
    }
    
    /// Appel√© quand un √©v√©nement est cr√©√©, modifi√© ou supprim√©
    static func handleEventChange(
        event: Event,
        modelContext: ModelContext
    ) throws {
        guard let truckId = event.assignedTruckId else {
            print("‚ÑπÔ∏è [TruckStatusService] √âv√©nement sans camion assign√©")
            return
        }
        
        try updateTruckStatusById(truckId: truckId, modelContext: modelContext)
    }
    
    /// Appel√© quand l'assignation d'un camion change sur un √©v√©nement
    static func handleTruckAssignmentChange(
        event: Event,
        oldTruckId: String?,
        newTruckId: String?,
        modelContext: ModelContext
    ) throws {
        // Mettre √† jour l'ancien camion (maintenant disponible)
        if let oldId = oldTruckId {
            try updateTruckStatusById(truckId: oldId, modelContext: modelContext)
        }
        
        // Mettre √† jour le nouveau camion (maintenant occup√©)
        if let newId = newTruckId {
            try updateTruckStatusById(truckId: newId, modelContext: modelContext)
        }
    }
}
