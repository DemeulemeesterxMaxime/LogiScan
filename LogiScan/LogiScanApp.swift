//
//  LogiScanApp.swift
//  LogiScan
//
//  Created by Demeulemeester on 24/09/2025.
//

import FirebaseCore
import FirebaseFirestore
import SwiftData
import SwiftUI

@main
struct LogiScanApp: App {
    let sharedModelContainer: ModelContainer
    @StateObject private var authService = AuthService()

    init() {
        // üî• INITIALISATION FIREBASE
        FirebaseApp.configure()
        print("üî• Firebase initialis√© avec succ√®s")
        print("üìã Project ID: logiscan-cf3fa")

        // Configuration Firestore pour mode hors ligne
        let settings = Firestore.firestore().settings
        settings.isPersistenceEnabled = true  // ‚úÖ Cache local activ√©
        settings.cacheSizeBytes = FirestoreCacheSizeUnlimited  // Cache illimit√©
        Firestore.firestore().settings = settings
        print("üíæ Firestore : Cache local activ√© (mode hors ligne support√©)")
        // Logs de diagnostic d√©taill√©s pour debugging
        print("=" + String(repeating: "=", count: 50))
        print("üöÄ LOGISCAN D√âMARRAGE")
        print("üì± Device: \(UIDevice.current.model)")
        print("üíæ iOS: \(UIDevice.current.systemVersion)")
        print("üÜî Bundle: \(Bundle.main.bundleIdentifier ?? "unknown")")
        print(
            "üì¶ Version: \(Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "?")"
        )
        print("üî¢ Build: \(Bundle.main.infoDictionary?["CFBundleVersion"] as? String ?? "?")")
        print("=" + String(repeating: "=", count: 50))

        do {
            // Configuration avec persistence sur disque
            print("üîÑ LogiScan - Initialisation ModelContainer...")

            let configuration = ModelConfiguration(
                isStoredInMemoryOnly: false,  // ‚úÖ Persistence activ√©e sur disque
                allowsSave: true
            )

            sharedModelContainer = try ModelContainer(
                for: StockItem.self,  // Mod√®le principal pour la gestion de stock
                Asset.self,  // Assets s√©rialis√©s
                Movement.self,  // Tra√ßabilit√© des mouvements
                Event.self,  // Gestion des √©v√©nements
                Truck.self,  // Gestion des camions
                Order.self,  // Gestion des commandes
                OrderLine.self,  // Lignes de commandes
                OrderTimestamp.self,  // Historique des commandes
                Location.self,  // Gestion des emplacements
                QuoteItem.self,  // Articles du devis (nouveau)
                AssetReservation.self,  // R√©servations d'assets (nouveau)
                configurations: configuration
            )

            print("‚úÖ ModelContainer cr√©√© avec succ√®s (persistence activ√©e)")
            print("   - 11 mod√®les configur√©s")
            print("   - Donn√©es sauvegard√©es sur disque")

        } catch {
            print("‚ùå ERREUR CRITIQUE ModelContainer: \(error)")
            print("üìù D√©tails: \(error.localizedDescription)")

            // ‚ö†Ô∏è Fallback en m√©moire pour √©viter le crash complet
            do {
                print("‚ö†Ô∏è Tentative de fallback en mode m√©moire...")
                let fallbackConfig = ModelConfiguration(isStoredInMemoryOnly: true)
                sharedModelContainer = try ModelContainer(
                    for: StockItem.self,
                    Asset.self,
                    Movement.self,
                    Event.self,
                    Truck.self,
                    Order.self,
                    OrderLine.self,
                    OrderTimestamp.self,
                    Location.self,
                    QuoteItem.self,
                    AssetReservation.self,
                    configurations: fallbackConfig
                )
                print("‚ö†Ô∏è Mode d√©grad√© activ√© : persistence en m√©moire uniquement")
                print("‚ö†Ô∏è Les donn√©es seront perdues √† la fermeture de l'app")
            } catch let fallbackError {
                print("‚ùå ERREUR FATALE - Impossible d'initialiser m√™me en mode m√©moire")
                print("   Erreur: \(fallbackError)")
                // En dernier recours seulement
                fatalError(
                    "Impossible d'initialiser l'application: \(fallbackError.localizedDescription)")
            }
        }
    }

    var body: some Scene {
        WindowGroup {
            if authService.isAuthenticated {
                MainTabView()
                    .environmentObject(authService)
            } else {
                LoginView()
                    .environmentObject(authService)
            }
        }
        .modelContainer(sharedModelContainer)
    }
}
